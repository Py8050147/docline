// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  clerkUserId String   @unique
  email     String?
  name      String?
  imageUrl  String?
  role      UserRole  @default(UNASSIGNED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  credits   Int   @default(2)

  specialty String?
  experience Int?
  credentialUrl String?
  description String?
  verificationStatus VerificationStatus @default(PENDING)
  patientAppointments Appointment[] @relation("PatientAppointments")
  doctorAppointments Appointment[] @relation("DoctorAppointments")
  availabilities     Availability[]
  transactions      CreditTransaction[]
  payout      Payout[]
}

enum UserRole {
  UNASSIGNED
  PATIENT
  DOCTOR
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model Availability {
  id        String   @id @default(uuid())
  doctorId  String
  doctor    User     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  startTime DateTime
  endTime   DateTime
  status    SlotStatus  @default(AVAILABLE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([doctorId, startTime])
}

enum SlotStatus {
  AVAILABLE
  BLOCKED
  BOOKED
}
model Appointment {
  id        String   @id @default(uuid())
  patientId  String
  patient    User   @relation("PatientAppointments", fields: [patientId], references: [id])
  doctorId    String
  doctor     User  @relation("DoctorAppointments", fields: [doctorId], references: [id])
  startTime     DateTime
  endTime       DateTime
  status       AppointmentStatus    @default(SCHEDULED)
  NOTES     String?  @db.Text
  patientDescription    String?   @db.Text

  videoSessionId    String?
  videoSessionToken   String?

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([status, startTime])
  @@index([doctorId, startTime])
}

enum AppointmentStatus{
  SCHEDULED
  COMPLETED
  CANCELLED
}


model  CreditTransaction {
  id      String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount   Int
  type    TransactionType 
  packageId     String?
  createAt      DateTime   @default(now()) 
}

enum  TransactionType {
  CREDIT_PURCHASE
  APPOINTMENT_EDUCTION
  ADMIN_ADJUSTMENT
}

model  Payout {
  id     String    @id  @default(uuid())
  doctorId   String
  doctor    User   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  amount    Float
  credits    Int
  platFormFee   Float
  netAmount     Float
  paypalEmail   String
  status       PayoutStatus     @default(PROCESSING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  processedAt   DateTime?
  processedBy   String?

  @@index([status, credits])
  @@index([doctorId, status])
}

enum PayoutStatus {
  PROCESSING
  PROCESSED
}